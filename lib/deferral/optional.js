// Generated by CoffeeScript 1.6.3
var argsOf, defer;

defer = require('when').defer;

argsOf = require('../util').argsOf;

module.exports = function(Preparator, decoratedFn) {
  var argPosition;
  Preparator || (Preparator = {});
  Preparator.timeout || (Preparator.timeout = 0);
  decoratedFn || (decoratedFn = Preparator);
  if (typeof decoratedFn !== 'function') {
    throw new Error('expected function as last arg');
  }
  if (Preparator.resolver != null) {
    argPosition = argsOf(decoratedFn).indexOf(Preparator.resolver);
  }
  return function() {
    var arg, deferral, newArgs, reject, resolver, timeout, _i, _len;
    deferral = defer();
    Preparator.context = typeof Preparator.context === 'undefined' ? this : Preparator.context;
    if (Preparator.resolver != null) {
      if (argPosition >= 0) {
        if (Preparator.timeout !== 0) {
          timeout = setTimeout((function() {
            deferral.notify({
              event: 'timeout'
            });
            if (Preparator.resolveOnTimeout) {
              return deferral.resolve();
            }
            return deferral.reject(new Error('timeout'));
          }), Preparator.timeout);
        }
        resolver = function(result) {
          if (timeout != null) {
            clearTimeout(timeout);
          }
          return deferral.resolve(result);
        };
        reject = function(error) {
          if (timeout != null) {
            clearTimeout(timeout);
          }
          return deferral.reject(error);
        };
        resolver.resolve = resolver;
        resolver.reject = reject;
        resolver.notify = deferral.notify;
        newArgs = [];
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          arg = arguments[_i];
          newArgs.push(arg);
        }
        newArgs[argPosition] = resolver;
        decoratedFn.apply(Preparator.context, newArgs);
      } else {
        decoratedFn.apply(Preparator.context, arguments);
        deferral.resolve();
      }
      return deferral.promise;
    }
    decoratedFn.apply(Preparator.context, arguments);
    deferral.resolve();
    return deferral.promise;
  };
};
