// Generated by CoffeeScript 1.4.0
var Defer, argsOf;

argsOf = require('../util').argsOf;

Defer = require('when').defer;

module.exports = function(Preparator, decoratedFn) {
  if (typeof Preparator !== 'object' || Preparator instanceof Array) {
    throw new Error('also.inject.async(Preparator, decoratedFn) requires Preparator as object');
  }
  return (function(context, beforeAll) {
    context.signature = argsOf(decoratedFn);
    context.first = [];
    context.last = [];
    if ((Preparator.beforeAll != null) && typeof Preparator.beforeAll === 'function') {
      Preparator.beforeAll(function(result) {
        if (result instanceof Error) {
          return beforeAll.reject(result);
        }
        return beforeAll.resolve(result);
      }, context);
    } else {
      beforeAll.resolve();
    }
    return function() {
      var arg, rejected, resolved, _i, _len;
      context.inject = [];
      if (Preparator.beforeEach != null) {
        Preparator.beforeEach(context);
      }
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        context.inject.push(arg);
      }
      return beforeAll.promise.then(resolved = function() {
        var result;
        result = decoratedFn.apply(null, context.first.concat(context.inject).concat(context.last));
        if (Preparator.afterEach != null) {
          Preparator.afterEach(context, result);
        }
        return result;
      }, rejected = function(error) {
        if (Preparator.error instanceof Function) {
          return Preparator.error(error);
        }
      });
    };
  })(function() {}, Defer());
};
