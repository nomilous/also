// Generated by CoffeeScript 1.4.0
var Defer, argsOf, sequence;

argsOf = require('../util').argsOf;

Defer = require('when').defer;

sequence = require('when/sequence');

module.exports = function(Preparator, decoratedFn) {
  if (typeof Preparator !== 'object' || Preparator instanceof Array) {
    throw new Error('also.inject.async(Preparator, decoratedFn) requires Preparator as object');
  }
  return (function(context, beforeAllDone) {
    var beforeAll;
    context.signature = argsOf(decoratedFn);
    context.first = [];
    context.last = [];
    beforeAll = function() {
      var defer, done;
      defer = Defer();
      if (beforeAllDone) {
        return defer.resolve();
      }
      if (!((Preparator.beforeAll != null) && typeof Preparator.beforeAll === 'function')) {
        return defer.resolve();
      }
      beforeAllDone = true;
      done = function(result) {
        if (result instanceof Error) {
          return defer.reject(result);
        }
        return defer.resolve(result);
      };
      Preparator.beforeAll(done, context);
      return defer.promise;
    };
    return function() {
      var afterEach, arg, beforeEach, callDecoratedFn, finished, inject, _i, _len;
      inject = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        inject.push(arg);
      }
      finished = Defer();
      beforeEach = function() {
        var defer, done;
        defer = Defer();
        if (!((Preparator.beforeEach != null) && typeof Preparator.beforeEach === 'function')) {
          return defer.resolve();
        }
        done = function(result) {
          finished.notify({
            beforeEach: result
          });
          if (result instanceof Error) {
            return defer.reject(result);
          }
          return defer.resolve(result);
        };
        Preparator.beforeEach(done, context);
        return defer.promise;
      };
      callDecoratedFn = function() {
        var defer;
        defer = Defer();
        decoratedFn.apply(null, [
          function(result) {
            finished.notify({
              result: result
            });
            if (result instanceof Error) {
              return defer.reject(result);
            }
            return defer.resolve(result);
          }
        ].concat(context.first.concat(inject).concat(context.last)));
        return defer.promise;
      };
      afterEach = function() {
        var defer, done;
        defer = Defer();
        if (!((Preparator.afterEach != null) && typeof Preparator.afterEach === 'function')) {
          return defer.resolve();
        }
        done = function(result) {
          finished.notify({
            afterEach: result
          });
          if (result instanceof Error) {
            return defer.reject(result);
          }
          return defer.resolve(result);
        };
        Preparator.afterEach(done, context);
        return defer.promise;
      };
      sequence([beforeAll, beforeEach, callDecoratedFn, afterEach]).then(function(results) {
        return finished.resolve(results[2]);
      }, function(error) {
        if (Preparator.error instanceof Function) {
          Preparator.error(error);
        }
        return done.reject(error);
      }, finished.notify);
      return finished.promise;
    };
  })(function() {}, false);
};
