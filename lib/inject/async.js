// Generated by CoffeeScript 1.4.0
var Defer, argsOf, sequence;

argsOf = require('../util').argsOf;

Defer = require('when').defer;

sequence = require('when/sequence');

module.exports = function(Preparator, decoratedFn) {
  if (typeof Preparator !== 'object' || Preparator instanceof Array) {
    throw new Error('also.inject.async(Preparator, decoratedFn) requires Preparator as object');
  }
  return (function(context, done) {
    var beforeAll;
    context.signature = argsOf(decoratedFn);
    context.first = [];
    context.last = [];
    beforeAll = function() {
      var defer;
      defer = Defer();
      if (done.beforeAll) {
        return defer.resolve();
      }
      if (!((Preparator.beforeAll != null) && typeof Preparator.beforeAll === 'function' && (done.beforeAll = true))) {
        return defer.resolve();
      }
      done = function(result) {
        done.beforeAll = true;
        if (result instanceof Error) {
          return defer.reject(result);
        }
        return defer.resolve(result);
      };
      Preparator.beforeAll(done, context);
      return defer.promise;
    };
    return function() {
      var arg, beforeEach, rejected, resolved, _i, _len;
      context.inject = [];
      for (_i = 0, _len = arguments.length; _i < _len; _i++) {
        arg = arguments[_i];
        context.inject.push(arg);
      }
      beforeEach = function() {
        var defer;
        defer = Defer();
        if (!((Preparator.beforeEach != null) && typeof Preparator.beforeEach === 'function')) {
          return defer.resolve();
        }
        done = function(result) {
          if (result instanceof Error) {
            return defer.reject(result);
          }
          return defer.resolve(result);
        };
        Preparator.beforeEach(done, context);
        return defer.promise;
      };
      return sequence([beforeAll, beforeEach]).then(resolved = function() {
        decoratedFn.apply(null, context.first.concat(context.inject).concat(context.last));
        if (Preparator.afterEach != null) {
          return Preparator.afterEach(context, result);
        }
      }, rejected = function(error) {
        if (Preparator.error instanceof Function) {
          return Preparator.error(error);
        }
      });
    };
  })(function() {}, {
    beforeAll: false
  });
};
